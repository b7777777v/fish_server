// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/b7777777v/fish_server/internal/app/game"
	game2 "github.com/b7777777v/fish_server/internal/biz/game"
	"github.com/b7777777v/fish_server/internal/conf"
	"github.com/b7777777v/fish_server/internal/data"
	"github.com/b7777777v/fish_server/internal/pkg/logger"
)

// Injectors from wire.go:

func initApp(config *conf.Config) (*game.GameApp, func(), error) {
	confData := config.Data
	log := config.Log
	sugaredLogger, cleanup, err := logger.NewLogger(log)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup2, err := data.NewData(confData, sugaredLogger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	gameRepo := data.NewGameRepo(dataData, sugaredLogger)
	playerRepo := data.NewGamePlayerRepo(dataData, sugaredLogger)
	fishSpawner := game2.NewFishSpawnerProvider(sugaredLogger)
	mathModel := game2.NewMathModelProvider(sugaredLogger)
	roomManager := game2.NewRoomManagerProvider(sugaredLogger, fishSpawner, mathModel)
	gameUsecase := game2.NewGameUsecaseProvider(gameRepo, playerRepo, roomManager, fishSpawner, mathModel, sugaredLogger)
	server := config.Server
	gameApp := game.NewGameApp(gameUsecase, server, sugaredLogger)
	return gameApp, func() {
		cleanup2()
		cleanup()
	}, nil
}
